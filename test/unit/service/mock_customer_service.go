// Code generated by mockery v2.43.2. DO NOT EDIT.

package service

import (
	domain "billing/domain"

	mock "github.com/stretchr/testify/mock"
)

// CustomerService is an autogenerated mock type for the CustomerService type
type CustomerService struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *CustomerService) Create(data domain.Customer) (domain.Customer, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Customer) (domain.Customer, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(domain.Customer) domain.Customer); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(domain.Customer)
	}

	if rf, ok := ret.Get(1).(func(domain.Customer) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *CustomerService) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *CustomerService) GetAll() ([]domain.Customer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Customer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *CustomerService) GetById(id int) (domain.Customer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.Customer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) domain.Customer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Customer)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutstanding provides a mock function with given fields: id, loanId
func (_m *CustomerService) GetOutstanding(id int, loanId int) (domain.Customer, error) {
	ret := _m.Called(id, loanId)

	if len(ret) == 0 {
		panic("no return value specified for GetOutstanding")
	}

	var r0 domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (domain.Customer, error)); ok {
		return rf(id, loanId)
	}
	if rf, ok := ret.Get(0).(func(int, int) domain.Customer); ok {
		r0 = rf(id, loanId)
	} else {
		r0 = ret.Get(0).(domain.Customer)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, loanId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, data
func (_m *CustomerService) Update(id int, data domain.Customer) error {
	ret := _m.Called(id, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, domain.Customer) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCustomerService creates a new instance of CustomerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerService {
	mock := &CustomerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
